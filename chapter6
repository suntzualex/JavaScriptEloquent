// Methods
var rabbit = {};
rabbit.speak = function(line){
 console.log("The rabbit says '" + line + "'");
};

rabbit.speak("I'm alive.");

function speak(line){
 console.log("The " + this.type +  " rabbit says '" + line + "'");
}
var whiteRabbit = {type: "white", speak: speak};
var fatRabbit = {type: "fat", speak: speak};

whiteRabbit.speak("Oh my ears and whiskers, " + "how late it's getting!");
fatRabbit.speak("I could sure use a carrot right now.");

// code uses the this keyword 

// method apply and call 
speak.apply(fatRabbit, ["Burp!"]);
speak.call({type: "old"}, "Oh my.");

// Prototypes
var empty = {};
console.log(empty.toString);
console.log(empty.toString());
// the magic of empty objects

console.log(Object.getPrototypeOf({}) == Object.prototype);
console.log(Object.getPrototypeOf(Object.prototype));

// functions derive from Function.prototype and arrays from Array.prototype
console.log(Object.getPrototypeOf(isNaN) == Function.prototype);
console.log(Object.getPrototypeOf([]) == Array.prototype);

// use Object.create to create objects with a specific prototype
var protoRabbit = {
 speak: function(line){
  console.log("The " + this.type + " rabbit says '" + line + "'");
}
 };
var killerRabbit = Object.create(protoRabbit);
killerRabbit.type = "killer";
killerRabbit.speak("SKREEEEE!");


// constructors
function Rabbit(type){
 this.type = type;
}

var killerRabbot = new Rabbit("killer");
var blackRabbit = new Rabbit("black");
console.log(blackRabbit.type);

Rabbit.prototype.speak = function(line){
 console.log("The " + this.type + " rabbit says '" + line + "'");
};
blackRabbit.speak("Doom...");

// Overriding derived properties
Rabbit.prototype.teeth = "small";
console.log(killerRabbit.teeth);
killerRabbit.teeth = "Log, sharp, and bloody";
console.log(killerRabbit.teeth);
console.log(blackRabbit.teeth);
console.log(Rabbit.prototype.teeth);

console.log(Array.prototype.toString == Object.prototype.toString);
console.log([1,2].toString());
console.log(Object.prototype.toString.call([1,2]));

// prototype inference
Rabbit.prototype.dance = function(){
 console.log("The " + this.type + " rabbit dances a jig.");
};
killerRabbit.dance();

// example from chapter 4
var map = {};
function storePhi(event, phi){
 map[event] = phi;
}
storePhi("pizza", 0.089);
storePhi("touched tree ", -0.081);

Object.prototype.nonsense = "hi";
for(var name in map}{
 console.log(name);
}
// also gives nonsense
console.log("nonsense" in map);
console.log("toString" in map);
delete Object.prototype.nonsense;

Object.defineProperty(Object.prototype, "hiddenNonsense", {enumerable: false, value: "hi"});
for(var name in map){
 console.log(name)
}
console.log(map.hiddenNonsense);
//not looking at the prototypes
console.log(map.hasOwnProperty("toString"));


// clean loop 
for(var name in map){
 if(map.hasOwnProperty(name)){
  // this is an own property
 }
  }

// prototype-less objects
var map = Object.create(null);
map["pizza"] = 0.1;
console.log("toString"] in map);
console.log("pizza" in map);

// polymorphism via example of laying out a table
// write a program that given an array of arrays of table cells
// builds a string that contains a nicely laid out table

// the interface: minHeight() returns a number indicating min height of cell (in lines)
// minWidth() returns a number indicating min width in characters
// draw(width, height) returns an array of length height 


function rowHeights(rows){
 return rows.map(function(row){
  return row.reduce(function(max, cell){
   return Math.max(max, cell.minHeight());
},0);
});
   }

// the _ parameter is not going to be used

function colWidths(rows){
 return rows[0].map(function(_, i){
  return rows.reduce(function(max, row){
   return Math.max(max, row[i].minWidth());
}, 0);
});
}


function drawTable(rows){
 var heights = rowHeights(rows);
 var widths = colWidths(rows);
 function drawLine(blocks, lineNo){
  return blocks.map(function(block){
   return block[lineNo];
 }).join(" ");
}

function drawRow(row, rowNum){
 var blocks = row.map(function(cell, colNum){
  return cell.draw(widths[colNum], heights[rowNum]);
});
return blocks[0].map(function(_ , lineNo){
  return drawLine(blocks, lineNo);
}).join("\n");
 }
return rows.map(drawRow).join("\n");
}

function repeat(string, times){
 var result = "";
 for(var i = 0; i < times; i++){
  result += string;
 }
 return result;
}

function TextCell(text){
 this.text = text.split("\");
}

TextCell.prototype.minWidth = function(){
 return this.text.reduce(function(width, line){
  return Math.max(width, line.length);
}, 0);
};
TextCell.prototype.minHeight = function(){
return this.text.length;
};
TextCell.prototype.draw = function(width, height){
 var result = [];
 for(var i = 0; i < height; i++){
   var line = this.text[i] || "";
   result.push(line + repeat(" ", width - line.length));
}
return result;
};

var rows = [];
for (var i =0; i < 5; i++){
  var row = [];
}
  for(var j =0; j < 5; j++){
     if((j+i) % 2 == 0){
       row.push(new TextCell("##"));
    }else{
    row.push(new TextCell("  "));
  }
rows.push(row);
}
console.log(drawTable(rows));


function UnderLinedCell(inner){
 this.inner = inner;
}
UnderLinedCell.prototype.minWidth = function(){
  return this.inner.minWidth();
};
UnderlinedCell.prototype.minHeight = function(){
 return this.inner.minHeight() + 1;
};
UnderlinedCell.prototype.draw = function(width, height){
 return this.inner.draw(width, height - 1).concat([repeat("-", width)]);
};

function dataTable(data){
 var keys = Object.keys(data[0]);
 var headers = keys.map(function(name){
  return new UnderlinedCell(new TextCell(name));
 });
 var body = data.map(function(row){
   return keys.map(function(name){
    return new TextCell(String(row[name]));
 });
});
return [headers].concat(body);
}

console.log(drawTable(dataTable(MOUNTAINS)));

// Object.keys function returns an array of property names in an object

// Getters and Setters
var pile = {
  elements: ["eggshell", "orange peel", "worm"],
 get height(){
   return this.elements.length;
},
 set height(value){
  console.log("Ignoring attempt to set height to", value);
}
  };

console.log(pile.height);
pile.height = 100;

Object.defineProperty(TextCell.prototype, "heightProp", 
 get: function() { return this.text.length; }
});
var cell = new TextCell("no\nway");
console.log(cell.heightProp);

// Inheritance
// right-aligning numbers in the table
function RTextCell(text){
 TextCell.call(this, text);
}
RTextCell.prototype = Object.create(TextCell.prototype);
RTextCell.prototype.draw = function(width, height){
 var result = [];
 for(var i =0; i < height; i++){
   var line = this.text[i] || "";
   result.push(repeat(" ", width - line.length) + line);
}
 return result;
};

// reuse of the constructor and the minHeight and minWidth methods from the
// regular TextCell 

function dataTable(data){
 var keys = Object.keys(data[0]);
 var headers = keys.map(function(name){
   return new UnderlinedCell(new TextCell(name));
 });
 var body = data.map(function(row){
  return keys.map(function(name){
   var value = row[name];
  // this is changed
  if(typeof value == "number"){
    return new RTextCell(String(value));
  }else{
    return new TextCell(String(value));
 }
});
});
return [headers].concat(body);
}

console.log(drawTable(dataTable(MOUNTAINS)));

// inheritance, encapsulation and polymorphism

// The instanceof operator
console.log(new RTextCell("A") instanceof RTextCell);
console.log(new RTextCell("A") instanceof TextCell);
console.log(new TextCell("A") instanceof RTextCell);
console.log([1] instanceof Array);

// summary objects have prototypes which are in turn objects
// simple objects have Object.prototype as their prototype
// Constructors can be used to create new objects
// specify interfaces for objects rest is encapsulated
// polymorphism different objects with the same interface
// and inheritance



       
 





